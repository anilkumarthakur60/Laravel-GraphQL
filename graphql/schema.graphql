
type  Query{
    users(name:String @like): [User!]! @paginate(scopes: ["verified"]),
    posts(name:String @like): [Post!]! @paginate(scopes: []),
    categories(name:String @like): [Category!]! @paginate(scopes: []),
    user(id:ID @eq):User @find,
}
type  User{
    id: ID!,
    name:String!,
    email_verified_at:String,
}

type  Post{
    id: ID!,
    name:String!,
    tags:[Tag] @hasMany
}

type  Tag{
    id: ID!,
    name:String!,
}

type  Category{
    id: ID!,
    name:String!,
    posts:[Post] @hasMany
}

type  Mutation{
    createUser(
        name:String!,
        email:String!,
        password:String!,
        password_confirmation:String,
    ):User @create,

    updateUser(
        id:ID,
        name:String!,
        email:String!,
        password:String
    ):User @update,

    upsertUser(
        name: String!,
        email: String!,
        password: String,
    ): User @upsert


    deleteUser(id: ID! @whereKey): User @delete
}
